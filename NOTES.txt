## Removed from UPDATE.pod:

=head2 Update a row based on data in other tables

    -- Slightly less pointless example
    UPDATE posts 
    SET title = user.username || title
    JOIN users user ON user.id = posts.user_id;

Joining two tables for an update is a similar sort of exercise to
joining them for a select query and using data from both.

=over

=item 1. Create a Schema object representing the database you are working with:

        my $schema = MyDatabase::Schema->connect('dbi:SQLite:my.db');

=item 2. Call the B<search> method on the resultset for the L<ResultSource|DBIx::Class::ResultSource> you wish to update data in, joining to the second table:

        my $posts = $schema->resultset('Post')->search(
          {},
          { join => 'user' }
        );

    The B<join> key takes as an argument a nested structure of one or more relation names (see L<DBIx::Class::Manual::SQLHackers::CREATE>).

=item 3. Call the B<update> method on the resultset to run the UPDATE statement:

        $posts->update({ 'me.title' => \[ 'user.username || me.title' ] });

^^ I am 95% sure this won't actually work, please try it (ideally as a passing or failing test)

=back
